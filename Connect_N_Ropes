/*
11.17.24

https://www.techiedelight.com/?problem=ConnectNRopes

Given n ropes of different lengths, connect them into a single rope with minimum cost. Assume that the cost to connect two ropes is the same as the sum of their lengths.

Input: [5, 4, 2, 8]
Output: 36
Explanation: The total cost for connecting all ropes is 6 + 11 + 19 = 36.

[5, 4, 2, 8] –> First, connect ropes of lengths 4 and 2 that will cost 6.
[5, 6, 8]    –> Next, connect ropes of lengths 5 and 6 that will cost 11.
[11, 8]      –> Finally, connect the remaining two ropes that will cost 19.

*/

class Solution
{
	public static int findMinCost(List<Integer> prices)
	{
		// Write your code here...
		PriorityQueue<Integer> pq = new PriorityQueue<>(prices);
		List<Integer> list = new LinkedList<>();
		
		int sum = 0;
		while (!pq.isEmpty()){
           if (list.size() < 3){
           	   list.add(pq.poll());
           }
			
			if (list.size() ==2 ){
				int val = list.stream().mapToInt(Integer::intValue).sum();
				sum += val;
				pq.add(val);
				list.clear();
				
			}
			
		}
		
		return sum;
	}
}
